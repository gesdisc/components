{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "components/accordion/accordion.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraAccordion",
          "slots": [
            {
              "description": "The default slot for accordion content.",
              "name": ""
            },
            {
              "description": "The summary/header for the accordion (optional, overrides summary property)",
              "name": "summary"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-icon': TerraIcon,\n    }"
            },
            {
              "kind": "field",
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary/header for the accordion. Use the property for simple text, or the slot for custom content.",
              "attribute": "summary"
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the accordion is open or not. This property is reflected as an attribute and can be controlled programmatically or by user interaction.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showArrow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "showArrow"
            },
            {
              "kind": "method",
              "name": "handleToggle",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "emitted when the accordion opens or closes",
              "name": "terra-accordion-toggle",
              "reactName": "onTerraAccordionToggle",
              "eventName": "TerraAccordionToggleEvent"
            }
          ],
          "attributes": [
            {
              "name": "summary",
              "type": {
                "text": "string"
              },
              "description": "The summary/header for the accordion. Use the property for simple text, or the slot for custom content.",
              "fieldName": "summary"
            },
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the accordion is open or not. This property is reflected as an attribute and can be controlled programmatically or by user interaction.",
              "fieldName": "open"
            },
            {
              "name": "showArrow",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "showArrow"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A collapsible content panel for showing and hiding content.",
          "tagNameWithoutPrefix": "accordion",
          "tagName": "terra-accordion",
          "customElement": true,
          "jsDoc": "/**\n * @summary A collapsible content panel for showing and hiding content.\n * @documentation https://disc.gsfc.nasa.gov/components/accordion\n * @status experimental\n * @since 1.0\n *\n * The TerraAccordion component provides a simple, accessible way to show and hide content. It uses native <details> and <summary> elements for built-in accessibility and keyboard support. The summary/header can be set via the `summary` property for simple text, or via a named `summary` slot for custom content (such as icons or rich HTML). The open state can be controlled with the `open` property, which is reflected as an attribute.\n *\n * @slot - The default slot for accordion content.\n * @slot summary - The summary/header for the accordion (optional, overrides summary property)\n *\n * @property {string} summary - The summary/header for the accordion. Use the property for simple text, or the slot for custom content.\n * @property {boolean} open - Whether the accordion is open or not. This property is reflected as an attribute and can be controlled programmatically or by user interaction.\n *\n * @event terra-accordion-toggle - emitted when the accordion opens or closes\n *\n * @dependency terra-icon\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/accordion",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "terra-icon"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraAccordion",
            "module": "components/accordion/accordion.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/alert/alert.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraAlert",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the optional icon.",
              "name": "icon"
            },
            {
              "description": "The container that wraps the alert's main content.",
              "name": "message"
            }
          ],
          "slots": [
            {
              "description": "The alert's main content.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autoHideTimeout",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "remainingTimeInterval",
              "type": {
                "text": "number"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "countdownAnimation",
              "type": {
                "text": "Animation | undefined"
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(this, 'icon', 'suffix')"
            },
            {
              "kind": "field",
              "name": "currentToastStack",
              "type": {
                "text": "HTMLDivElement"
              },
              "privacy": "private",
              "static": true
            },
            {
              "kind": "field",
              "name": "toastStack",
              "privacy": "private",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "countdownElement",
              "type": {
                "text": "HTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "attribute": "open",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "attribute": "closable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'primary'\n        | 'success'\n        | 'neutral'\n        | 'warning'\n        | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`, meaning\nthe alert will not close on its own.",
              "attribute": "duration"
            },
            {
              "kind": "field",
              "name": "countdown",
              "type": {
                "text": "'rtl' | 'ltr' | undefined"
              },
              "description": "Enables a countdown that indicates the remaining time the alert will be displayed.\nTypically used to indicate the remaining time before a whole app refresh.",
              "attribute": "countdown",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "remainingTime",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "restartAutoHide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "pauseAutoHide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resumeAutoHide",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCountdownChange",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCloseClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleOpenChange"
            },
            {
              "kind": "method",
              "name": "handleDurationChange"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the alert."
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the alert"
            },
            {
              "kind": "method",
              "name": "toast",
              "description": "Displays the alert as a toast notification. This will move the alert out of its position in the DOM and, when\ndismissed, it will be removed from the DOM completely. By storing a reference to the alert, you can reuse it by\ncalling this method again. The returned promise will resolve after the alert is hidden."
            }
          ],
          "events": [
            {
              "description": "Emitted when the alert opens.",
              "name": "terra-show",
              "reactName": "onTerraShow",
              "eventName": "TerraShowEvent"
            },
            {
              "description": "Emitted after the alert opens and all animations are complete.",
              "name": "terra-after-show",
              "reactName": "onTerraAfterShow",
              "eventName": "TerraAfterShowEvent"
            },
            {
              "description": "Emitted when the alert closes.",
              "name": "terra-hide",
              "reactName": "onTerraHide",
              "eventName": "TerraHideEvent"
            },
            {
              "description": "Emitted after the alert closes and all animations are complete.",
              "name": "terra-after-hide",
              "reactName": "onTerraAfterHide",
              "eventName": "TerraAfterHideEvent"
            }
          ],
          "attributes": [
            {
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Indicates whether or not the alert is open. You can toggle this attribute to show and hide the alert, or you can\nuse the `show()` and `hide()` methods and this attribute will reflect the alert's open state.",
              "fieldName": "open"
            },
            {
              "name": "closable",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Enables a close button that allows the user to dismiss the alert.",
              "fieldName": "closable"
            },
            {
              "name": "variant",
              "type": {
                "text": "| 'primary'\n        | 'success'\n        | 'neutral'\n        | 'warning'\n        | 'danger'"
              },
              "default": "'primary'",
              "description": "The alert's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "duration",
              "default": "Infinity",
              "description": "The length of time, in milliseconds, the alert will show before closing itself. If the user interacts with\nthe alert before it closes (e.g. moves the mouse over it), the timer will restart. Defaults to `Infinity`, meaning\nthe alert will not close on its own.",
              "resolveInitializer": {
                "module": "src/components/alert/alert.component.ts"
              },
              "fieldName": "duration"
            },
            {
              "name": "countdown",
              "type": {
                "text": "'rtl' | 'ltr' | undefined"
              },
              "description": "Enables a countdown that indicates the remaining time the alert will be displayed.\nTypically used to indicate the remaining time before a whole app refresh.",
              "fieldName": "countdown"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Alerts are used to display important messages inline or as toast notifications.",
          "tagNameWithoutPrefix": "alert",
          "tagName": "terra-alert",
          "customElement": true,
          "jsDoc": "/**\n * @summary Alerts are used to display important messages inline or as toast notifications.\n * @documentation https://shoelace.style/components/alert\n * @status stable\n * @since 2.0\n *\n * @slot - The alert's main content.\n *\n * @event terra-show - Emitted when the alert opens.\n * @event terra-after-show - Emitted after the alert opens and all animations are complete.\n * @event terra-hide - Emitted when the alert closes.\n * @event terra-after-hide - Emitted after the alert closes and all animations are complete.\n *\n * @csspart base - The component's base wrapper.\n * @csspart icon - The container that wraps the optional icon.\n * @csspart message - The container that wraps the alert's main content.\n *\n * @animation alert.show - The animation to use when showing the alert.\n * @animation alert.hide - The animation to use when hiding the alert.\n */",
          "documentation": "https://shoelace.style/components/alert",
          "status": "stable",
          "since": "2.0",
          "animations": [
            {
              "name": "alert.show",
              "description": "The animation to use when showing the alert."
            },
            {
              "name": "alert.hide",
              "description": "The animation to use when hiding the alert."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraAlert",
            "module": "components/alert/alert.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/browse-variables/browse-variables.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraBrowseVariables",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-variable-keyword-search': TerraVariableKeywordSearch,\n        'terra-button': TerraButton,\n        'terra-skeleton': TerraSkeleton,\n        'terra-icon': TerraIcon,\n        'terra-loader': TerraLoader,\n    }"
            },
            {
              "kind": "field",
              "name": "catalog",
              "type": {
                "text": "'giovanni'"
              },
              "default": "'giovanni'",
              "description": "Allows the user to switch the catalog between different providers\nTODO: add support for CMR catalog and make it the default",
              "attribute": "catalog"
            },
            {
              "kind": "field",
              "name": "searchQuery",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "selectedFacets",
              "type": {
                "text": "SelectedFacets"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "selectedVariables",
              "type": {
                "text": "Variable[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "showVariablesBrowse",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#controller",
              "privacy": "private",
              "default": "new BrowseVariablesController(this)"
            },
            {
              "kind": "method",
              "name": "handleSelectedVariablesChange"
            },
            {
              "kind": "method",
              "name": "reset"
            },
            {
              "kind": "method",
              "name": "handleObservationChange"
            },
            {
              "kind": "method",
              "name": "toggleFacetSelect",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleSearch",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TerraVariableKeywordSearchChangeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#selectFacetField",
              "parameters": [
                {
                  "name": "facet",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "field",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "selectOneFieldAtATime",
                  "default": "false",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "given a field, ex: \"observations\": \"Model\", will add the field to any existing selected facets\nif \"selectedOneFieldAtATime\" is true, then we will only select that one field"
            },
            {
              "kind": "method",
              "name": "#clearFacet",
              "parameters": [
                {
                  "name": "facet",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#unselectFacetField",
              "parameters": [
                {
                  "name": "facet",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "field",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleVariableSelection",
              "parameters": [
                {
                  "name": "variable",
                  "type": {
                    "text": "Variable"
                  }
                },
                {
                  "name": "checked",
                  "type": {
                    "text": "Boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderCategorySelect"
            },
            {
              "kind": "method",
              "name": "#renderFacet",
              "parameters": [
                {
                  "name": "facetKey",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "title",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "fields",
                  "optional": true,
                  "type": {
                    "text": "FacetField[]"
                  }
                },
                {
                  "name": "open",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderVariablesBrowse"
            }
          ],
          "attributes": [
            {
              "name": "catalog",
              "type": {
                "text": "'giovanni'"
              },
              "default": "'giovanni'",
              "description": "Allows the user to switch the catalog between different providers\nTODO: add support for CMR catalog and make it the default",
              "fieldName": "catalog"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Browse through the NASA CMR or Giovanni catalogs.",
          "tagNameWithoutPrefix": "browse-variables",
          "tagName": "terra-browse-variables",
          "customElement": true,
          "jsDoc": "/**\n * @summary Browse through the NASA CMR or Giovanni catalogs.\n * @documentation https://disc.gsfc.nasa.gov/components/browse-variables\n * @status MVP\n * @since 1.0\n *\n * @emits terra-variables-change - emitted when the user selects or unselects variables\n *\n * @dependency terra-variable-keyword-search\n * @dependency terra-button\n * @dependency terra-skeleton\n * @dependency terra-icon\n * @dependency terra-loader\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/browse-variables",
          "status": "MVP",
          "since": "1.0",
          "dependencies": [
            "terra-variable-keyword-search",
            "terra-button",
            "terra-skeleton",
            "terra-icon",
            "terra-loader"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraBrowseVariables",
            "module": "components/browse-variables/browse-variables.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/button/button.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraButton",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The container that wraps the prefix.",
              "name": "prefix"
            },
            {
              "description": "The button's label.",
              "name": "label"
            },
            {
              "description": "The container that wraps the suffix.",
              "name": "suffix"
            },
            {
              "description": "The button's caret icon, an `<sl-icon>` element.",
              "name": "caret"
            },
            {
              "description": "The spinner that shows when the button is in the loading state.",
              "name": "spinner"
            }
          ],
          "slots": [
            {
              "description": "The button's label.",
              "name": ""
            },
            {
              "description": "A presentational prefix icon or similar element.",
              "name": "prefix"
            },
            {
              "description": "A presentational suffix icon or similar element.",
              "name": "suffix"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "formControlController",
              "privacy": "private",
              "readonly": true,
              "default": "new FormControlController(this, {\n        assumeInteractionOn: ['click'],\n    })"
            },
            {
              "kind": "field",
              "name": "hasSlotController",
              "privacy": "private",
              "readonly": true,
              "default": "new HasSlotController(\n        this,\n        '[default]',\n        'prefix',\n        'suffix'\n    )"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | HTMLLinkElement"
              }
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false"
            },
            {
              "kind": "field",
              "name": "invalid",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "title"
            },
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "| 'default'\n        | 'primary'\n        | 'success'\n        | 'warning'\n        | 'danger'\n        | 'text'\n        | 'pagelink'"
              },
              "default": "'primary'",
              "description": "The button's theme variant.",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior.",
              "attribute": "caret",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "'square' | 'square-left' | 'square-right'"
              },
              "description": "The button's shape. Used to control the radius edge shape when button is not in a terra-button-group.",
              "attribute": "shape",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "attribute": "loading",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "attribute": "outline",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circular icon button. When this attribute is present, the button expects a single `<terra-icon>` in the\ndefault slot.",
              "attribute": "circle",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "default": "'button'",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\n`<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.",
              "attribute": "type"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\nThis attribute is ignored when `href` is present.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "attribute": "href"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "attribute": "target"
            },
            {
              "kind": "field",
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "attribute": "rel"
            },
            {
              "kind": "field",
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "attribute": "download"
            },
            {
              "kind": "field",
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "attribute": "form"
            },
            {
              "kind": "field",
              "name": "formAction",
              "type": {
                "text": "string"
              },
              "description": "Used to override the form owner's `action` attribute.",
              "attribute": "formaction"
            },
            {
              "kind": "field",
              "name": "formEnctype",
              "type": {
                "text": "| 'application/x-www-form-urlencoded'\n        | 'multipart/form-data'\n        | 'text/plain'"
              },
              "description": "Used to override the form owner's `enctype` attribute.",
              "attribute": "formenctype"
            },
            {
              "kind": "field",
              "name": "formMethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "description": "Used to override the form owner's `method` attribute.",
              "attribute": "formmethod"
            },
            {
              "kind": "field",
              "name": "formNoValidate",
              "type": {
                "text": "boolean"
              },
              "description": "Used to override the form owner's `novalidate` attribute.",
              "attribute": "formnovalidate"
            },
            {
              "kind": "field",
              "name": "formTarget",
              "type": {
                "text": "| '_self'\n        | '_blank'\n        | '_parent'\n        | '_top'\n        | string"
              },
              "description": "Used to override the form owner's `target` attribute.",
              "attribute": "formtarget"
            },
            {
              "kind": "field",
              "name": "forDialog",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used to connect this button to a dqialog on the page. Clicking the button will toggle the dialog's visiblity",
              "attribute": "for-dialog"
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "if button is used to control another element on the page, such as an accordion or dialog, this state communicates whether the controlled element is expanded"
            },
            {
              "kind": "field",
              "name": "validity",
              "description": "Gets the validity state object",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationMessage",
              "description": "Gets the validation message",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#handleDialogStateChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TerraDialogShowEvent | TerraDialogHideEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleClick",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInvalid",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "isButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "isLink",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDisabledChange"
            },
            {
              "kind": "method",
              "name": "click",
              "description": "Simulates a click on the button."
            },
            {
              "kind": "method",
              "name": "focus",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "FocusOptions"
                  }
                }
              ],
              "description": "Sets focus on the button."
            },
            {
              "kind": "method",
              "name": "blur",
              "description": "Removes focus from the button."
            },
            {
              "kind": "method",
              "name": "checkValidity",
              "description": "Checks for validity but does not show a validation message. Returns `true` when valid and `false` when invalid."
            },
            {
              "kind": "method",
              "name": "getForm",
              "return": {
                "type": {
                  "text": "HTMLFormElement | null"
                }
              },
              "description": "Gets the associated form, if one exists."
            },
            {
              "kind": "method",
              "name": "reportValidity",
              "description": "Checks for validity and shows the browser's validation message if the control is invalid."
            },
            {
              "kind": "method",
              "name": "setCustomValidity",
              "parameters": [
                {
                  "name": "message",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Sets a custom validation message. Pass an empty string to restore validity."
            },
            {
              "kind": "method",
              "name": "setPageLinkIcon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "href",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setFontSize",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "size",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "title",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "title"
            },
            {
              "name": "variant",
              "type": {
                "text": "| 'default'\n        | 'primary'\n        | 'success'\n        | 'warning'\n        | 'danger'\n        | 'text'\n        | 'pagelink'"
              },
              "default": "'primary'",
              "description": "The button's theme variant.",
              "fieldName": "variant"
            },
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "description": "The button's size.",
              "fieldName": "size"
            },
            {
              "name": "caret",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button with a caret. Used to indicate that the button triggers a dropdown menu or similar behavior.",
              "fieldName": "caret"
            },
            {
              "name": "shape",
              "type": {
                "text": "'square' | 'square-left' | 'square-right'"
              },
              "description": "The button's shape. Used to control the radius edge shape when button is not in a terra-button-group.",
              "fieldName": "shape"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Disables the button.",
              "fieldName": "disabled"
            },
            {
              "name": "loading",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws the button in a loading state.",
              "fieldName": "loading"
            },
            {
              "name": "outline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws an outlined button.",
              "fieldName": "outline"
            },
            {
              "name": "circle",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Draws a circular icon button. When this attribute is present, the button expects a single `<terra-icon>` in the\ndefault slot.",
              "fieldName": "circle"
            },
            {
              "name": "type",
              "type": {
                "text": "'button' | 'submit' | 'reset'"
              },
              "default": "'button'",
              "description": "The type of button. Note that the default value is `button` instead of `submit`, which is opposite of how native\n`<button>` elements behave. When the type is `submit`, the button will submit the surrounding form.",
              "fieldName": "type"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The name of the button, submitted as a name/value pair with form data, but only when this button is the submitter.\nThis attribute is ignored when `href` is present.",
              "fieldName": "name"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "The value of the button, submitted as a pair with the button's name as part of the form data, but only when this\nbutton is the submitter. This attribute is ignored when `href` is present.",
              "fieldName": "value"
            },
            {
              "name": "href",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "When set, the underlying button will be rendered as an `<a>` with this `href` instead of a `<button>`.",
              "fieldName": "href"
            },
            {
              "name": "target",
              "type": {
                "text": "'_blank' | '_parent' | '_self' | '_top'"
              },
              "description": "Tells the browser where to open the link. Only used when `href` is present.",
              "fieldName": "target"
            },
            {
              "name": "rel",
              "type": {
                "text": "string"
              },
              "default": "'noreferrer noopener'",
              "description": "When using `href`, this attribute will map to the underlying link's `rel` attribute. Unlike regular links, the\ndefault is `noreferrer noopener` to prevent security exploits. However, if you're using `target` to point to a\nspecific tab/window, this will prevent that from working correctly. You can remove or change the default value by\nsetting the attribute to an empty string or a value of your choice, respectively.",
              "fieldName": "rel"
            },
            {
              "name": "download",
              "type": {
                "text": "string | undefined"
              },
              "description": "Tells the browser to download the linked file as this filename. Only used when `href` is present.",
              "fieldName": "download"
            },
            {
              "name": "form",
              "type": {
                "text": "string"
              },
              "description": "The \"form owner\" to associate the button with. If omitted, the closest containing form will be used instead. The\nvalue of this attribute must be an id of a form in the same document or shadow root as the button.",
              "fieldName": "form"
            },
            {
              "name": "formaction",
              "type": {
                "text": "string"
              },
              "description": "Used to override the form owner's `action` attribute.",
              "fieldName": "formAction"
            },
            {
              "name": "formenctype",
              "type": {
                "text": "| 'application/x-www-form-urlencoded'\n        | 'multipart/form-data'\n        | 'text/plain'"
              },
              "description": "Used to override the form owner's `enctype` attribute.",
              "fieldName": "formEnctype"
            },
            {
              "name": "formmethod",
              "type": {
                "text": "'post' | 'get'"
              },
              "description": "Used to override the form owner's `method` attribute.",
              "fieldName": "formMethod"
            },
            {
              "name": "formnovalidate",
              "type": {
                "text": "boolean"
              },
              "description": "Used to override the form owner's `novalidate` attribute.",
              "fieldName": "formNoValidate"
            },
            {
              "name": "formtarget",
              "type": {
                "text": "| '_self'\n        | '_blank'\n        | '_parent'\n        | '_top'\n        | string"
              },
              "description": "Used to override the form owner's `target` attribute.",
              "fieldName": "formTarget"
            },
            {
              "name": "for-dialog",
              "type": {
                "text": "string | undefined"
              },
              "description": "Used to connect this button to a dqialog on the page. Clicking the button will toggle the dialog's visiblity",
              "fieldName": "forDialog"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Buttons represent actions that are available to the user.",
          "tagNameWithoutPrefix": "button",
          "tagName": "terra-button",
          "customElement": true,
          "jsDoc": "/**\n * @summary Buttons represent actions that are available to the user.\n * @documentation https://shoelace.style/components/button\n * @status stable\n * @since 2.0\n *\n * @slot - The button's label.\n * @slot prefix - A presentational prefix icon or similar element.\n * @slot suffix - A presentational suffix icon or similar element.\n *\n * @csspart base - The component's base wrapper.\n * @csspart prefix - The container that wraps the prefix.\n * @csspart label - The button's label.\n * @csspart suffix - The container that wraps the suffix.\n * @csspart caret - The button's caret icon, an `<sl-icon>` element.\n * @csspart spinner - The spinner that shows when the button is in the loading state.\n */",
          "documentation": "https://shoelace.style/components/button",
          "status": "stable",
          "since": "2.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraButton",
            "module": "components/button/button.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/chip/chip.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraChip",
          "slots": [
            {
              "description": "The chip's label.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "attribute": "size",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "#handleRemoveClick",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "size",
              "type": {
                "text": "'small' | 'medium' | 'large'"
              },
              "default": "'medium'",
              "fieldName": "size"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Used for contacts and tags",
          "tagNameWithoutPrefix": "chip",
          "tagName": "terra-chip",
          "customElement": true,
          "jsDoc": "/**\n * @summary Used for contacts and tags\n * @documentation https://disc.gsfc.nasa.gov/components/chip\n * @status stable\n * @since 1.0\n *\n * @slot - The chip's label.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/chip",
          "status": "stable",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraChip",
            "module": "components/chip/chip.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/combobox/combobox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraCombobox",
          "cssProperties": [
            {
              "description": "The height of the host element.",
              "name": "--host-height"
            },
            {
              "description": "The height of the search help element.",
              "name": "--help-height"
            },
            {
              "description": "The height of the input's label element.",
              "name": "--label-height"
            }
          ],
          "cssParts": [
            {
              "description": "A `search` element, the component's base.",
              "name": "base"
            },
            {
              "description": "An `input` element used for searching.",
              "name": "combobox"
            },
            {
              "description": "A `button` used for toggling the listbox's visibility.",
              "name": "button"
            },
            {
              "description": "A `ul` that holds the clickable options.",
              "name": "listbox"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        ...LitElement.shadowRootOptions,\n        delegatesFocus: true,\n    }"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'terra-combobox'"
            },
            {
              "kind": "field",
              "name": "initialQuery",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#combobox",
              "privacy": "private",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#listbox",
              "privacy": "private",
              "type": {
                "text": "HTMLUListElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#searchEngine",
              "privacy": "private",
              "type": {
                "text": "Fuse<GroupedListItem | ListItem> | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#walker",
              "privacy": "private",
              "type": {
                "text": "TreeWalker | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Search for Items'",
              "description": "Label the combobox with this.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'Item'",
              "description": "name the combobox with this.",
              "attribute": "name"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "hideHelp",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's help text.\nWhen hidden, not rendered at all.",
              "attribute": "hide-help"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "'INITIAL' | 'PENDING' | 'COMPLETE' | 'ERROR'"
              },
              "default": "'INITIAL'",
              "description": "status of the content",
              "attribute": "status"
            },
            {
              "kind": "field",
              "name": "content",
              "type": {
                "text": "Content"
              },
              "default": "{\n        type: SearchableListType.GroupedListItem,\n        data: [],\n    }",
              "description": "content or data of the combobox. This could be of type string | GroupedListItem[] | ListItem[] | undefined",
              "attribute": "content"
            },
            {
              "kind": "field",
              "name": "isExpanded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "query"
            },
            {
              "kind": "field",
              "name": "searchResults",
              "type": {
                "text": "GroupedListItem[] | ListItem[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "contentChanged",
              "parameters": [
                {
                  "name": "_oldValue",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#renderListItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#renderGroupListItem",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#renderError",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#renderLoading",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#dispatchChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleButtonClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleComboboxChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleOptionClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#manageListboxVisibility",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#selectOption",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Search for Items'",
              "description": "Label the combobox with this.",
              "fieldName": "label"
            },
            {
              "name": "name",
              "type": {
                "text": "string"
              },
              "default": "'Item'",
              "description": "name the combobox with this.",
              "fieldName": "name"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "fieldName": "placeholder"
            },
            {
              "name": "hide-help",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's help text.\nWhen hidden, not rendered at all.",
              "fieldName": "hideHelp"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "fieldName": "hideLabel"
            },
            {
              "name": "status",
              "type": {
                "text": "'INITIAL' | 'PENDING' | 'COMPLETE' | 'ERROR'"
              },
              "default": "'INITIAL'",
              "description": "status of the content",
              "fieldName": "status"
            },
            {
              "name": "content",
              "type": {
                "text": "Content"
              },
              "default": "{\n        type: SearchableListType.GroupedListItem,\n        data: [],\n    }",
              "description": "content or data of the combobox. This could be of type string | GroupedListItem[] | ListItem[] | undefined",
              "fieldName": "content"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Fuzzy-search for combobox with list autocomplete.",
          "tagNameWithoutPrefix": "combobox",
          "tagName": "terra-combobox",
          "customElement": true,
          "jsDoc": "/**\n * @summary Fuzzy-search for combobox with list autocomplete.\n * @documentation https://disc.gsfc.nasa.gov/components/combobox\n * @status experimental\n * @since 1.0\n *\n * @csspart base - A `search` element, the component's base.\n * @csspart combobox - An `input` element used for searching.\n * @csspart button - A `button` used for toggling the listbox's visibility.\n * @csspart listbox - A `ul` that holds the clickable options.\n *\n * @cssproperty --host-height - The height of the host element.\n * @cssproperty --help-height - The height of the search help element.\n * @cssproperty --label-height - The height of the input's label element.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/combobox",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraCombobox",
            "module": "components/combobox/combobox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-rods/data-rods.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDataRods",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-time-series': TerraTimeSeries,\n        'terra-date-range-slider': TerraDateRangeSlider,\n        'terra-spatial-picker': TerraSpatialPicker,\n        'terra-variable-combobox': TerraVariableCombobox,\n    }"
            },
            {
              "kind": "field",
              "name": "variableEntryId",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable entry ID (ex: GPM_3IMERGHH_06_precipitationCal)",
              "attribute": "variable-entry-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "description": "a collection entry id (ex: GPM_3IMERGHH_06)\nonly required if you don't include a variableEntryId",
              "attribute": "collection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variable",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable short name to plot (ex: precipitationCal)\nonly required if you don't include a variableEntryId",
              "attribute": "variable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The start date for the time series plot. (ex: 2021-01-01)",
              "attribute": "start-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The end date for the time series plot. (ex: 2021-01-01)",
              "attribute": "end-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "location",
              "type": {
                "text": "string | undefined"
              },
              "description": "The point location in \"lat,lon\" format.",
              "attribute": "location",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "bearerToken",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "attribute": "bearer-token"
            },
            {
              "kind": "field",
              "name": "catalogVariable",
              "type": {
                "text": "Variable"
              }
            },
            {
              "kind": "field",
              "name": "#catalog",
              "privacy": "private",
              "default": "new GiovanniVariableCatalog()"
            },
            {
              "kind": "field",
              "name": "#fetchVariableTask",
              "privacy": "private",
              "default": "new Task(this, {\n        task: async (_args, { signal }) => {\n            const variableEntryId = this.#getVariableEntryId()\n\n            console.debug('fetch variable ', variableEntryId)\n\n            if (!variableEntryId) {\n                return\n            }\n\n            const variable = await this.#catalog.getVariable(variableEntryId, {\n                signal,\n            })\n\n            console.debug('found variable ', variable)\n\n            if (!variable) {\n                return\n            }\n\n            this.startDate =\n                this.startDate ?? variable.exampleInitialStartDate?.toISOString()\n            this.endDate =\n                this.endDate ?? variable.exampleInitialEndDate?.toISOString()\n            this.catalogVariable = variable\n        },\n        args: () => [this.variableEntryId, this.collection, this.variable],\n    })"
            },
            {
              "kind": "method",
              "name": "#getVariableEntryId"
            },
            {
              "kind": "method",
              "name": "#handleDateRangeSliderChangeEvent",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TerraDateRangeChangeEvent"
                  }
                }
              ],
              "description": "anytime the date range slider changes, update the start and end date"
            },
            {
              "kind": "method",
              "name": "#handleVariableChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "TerraComboboxChangeEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleMapChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleTimeSeriesDateRangeChange",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted whenever the date range of the date slider is updated",
              "name": "terra-date-range-change",
              "reactName": "onTerraDateRangeChange",
              "eventName": "TerraDateRangeChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "variable-entry-id",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable entry ID (ex: GPM_3IMERGHH_06_precipitationCal)",
              "fieldName": "variableEntryId"
            },
            {
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "description": "a collection entry id (ex: GPM_3IMERGHH_06)\nonly required if you don't include a variableEntryId",
              "fieldName": "collection"
            },
            {
              "name": "variable",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable short name to plot (ex: precipitationCal)\nonly required if you don't include a variableEntryId",
              "fieldName": "variable"
            },
            {
              "name": "start-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The start date for the time series plot. (ex: 2021-01-01)",
              "fieldName": "startDate"
            },
            {
              "name": "end-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The end date for the time series plot. (ex: 2021-01-01)",
              "fieldName": "endDate"
            },
            {
              "name": "location",
              "type": {
                "text": "string | undefined"
              },
              "description": "The point location in \"lat,lon\" format.",
              "fieldName": "location"
            },
            {
              "name": "bearer-token",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "fieldName": "bearerToken"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A component for visualizing Hydrology Data Rods time series using the GES DISC Giovanni API",
          "tagNameWithoutPrefix": "data-rods",
          "tagName": "terra-data-rods",
          "customElement": true,
          "jsDoc": "/**\n * @summary A component for visualizing Hydrology Data Rods time series using the GES DISC Giovanni API\n * @documentation https://disc.gsfc.nasa.gov/components/data-rods\n * @status mvp\n * @since 1.0\n *\n * @event terra-date-range-change - Emitted whenever the date range of the date slider is updated\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/data-rods",
          "status": "mvp",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDataRods",
            "module": "components/data-rods/data-rods.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-subsetter/data-subsetter.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDataSubsetter",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "Record<string, typeof TerraElement>"
              },
              "static": true,
              "default": "{\n        'terra-accordion': TerraAccordion,\n        'terra-date-picker': TerraDatePicker,\n        'terra-icon': TerraIcon,\n        'terra-spatial-picker': TerraSpatialPicker,\n    }"
            },
            {
              "kind": "field",
              "name": "collectionEntryId",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "collection-entry-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showCollectionSearch",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "true",
              "attribute": "show-collection-search",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "jobId",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "job-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "bearerToken",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "bearer-token"
            },
            {
              "kind": "field",
              "name": "collectionWithServices",
              "type": {
                "text": "CollectionWithAvailableServices | undefined"
              }
            },
            {
              "kind": "field",
              "name": "selectedVariables",
              "type": {
                "text": "Variable[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "expandedVariableGroups",
              "type": {
                "text": "Set<string>"
              },
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "touchedFields",
              "type": {
                "text": "Set<string>"
              },
              "default": "new Set()"
            },
            {
              "kind": "field",
              "name": "spatialSelection",
              "type": {
                "text": "BoundingBox | LatLng | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "selectedDateRange",
              "type": {
                "text": "{ startDate: string | null; endDate: string | null }"
              },
              "default": "{\n        startDate: null,\n        endDate: null,\n    }"
            },
            {
              "kind": "field",
              "name": "selectedFormat",
              "type": {
                "text": "string"
              },
              "default": "defaultSubsetFileMimeType"
            },
            {
              "kind": "field",
              "name": "cancelingGetData",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "selectedTab",
              "type": {
                "text": "'web-links' | 'selected-params'"
              },
              "default": "'web-links'"
            },
            {
              "kind": "field",
              "name": "refineParameters",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "showDownloadMenu",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "renderedInDialog",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "spatialPicker",
              "type": {
                "text": "TerraSpatialPicker"
              }
            },
            {
              "kind": "field",
              "name": "#controller",
              "privacy": "private",
              "default": "new DataSubsetterController(this)"
            },
            {
              "kind": "method",
              "name": "jobIdChanged"
            },
            {
              "kind": "method",
              "name": "collectionChanged"
            },
            {
              "kind": "method",
              "name": "minimizeDialog"
            },
            {
              "kind": "method",
              "name": "#renderSubsetOptions"
            },
            {
              "kind": "method",
              "name": "#renderSearchForCollection"
            },
            {
              "kind": "method",
              "name": "#renderOutputFormatSelection"
            },
            {
              "kind": "method",
              "name": "#renderDateRangeSelection"
            },
            {
              "kind": "field",
              "name": "#handleStartDateChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleEndDateChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#resetDateRangeSelection",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#resetFormatSelection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getCollectionDateRange"
            },
            {
              "kind": "method",
              "name": "#handleRegionAccordionToggle"
            },
            {
              "kind": "method",
              "name": "#renderSpatialSelection"
            },
            {
              "kind": "field",
              "name": "#handleSpatialChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#resetSpatialSelection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#renderVariableSelection"
            },
            {
              "kind": "method",
              "name": "#buildVariableTree",
              "return": {
                "type": {
                  "text": "Record<string, any>"
                }
              },
              "parameters": [
                {
                  "name": "variables",
                  "type": {
                    "text": "Variable[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderVariableTree",
              "return": {
                "type": {
                  "text": "unknown"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Record<string, any>"
                  }
                },
                {
                  "name": "path",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getAllGroupPaths",
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "Record<string, any>"
                  }
                },
                {
                  "name": "path",
                  "default": "[]",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleGroupExpand",
              "parameters": [
                {
                  "name": "groupPath",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleExpandCollapseAll",
              "parameters": [
                {
                  "name": "tree",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#toggleVariableSelection",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                },
                {
                  "name": "variable",
                  "type": {
                    "text": "Variable"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#markFieldTouched",
              "parameters": [
                {
                  "name": "field",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#resetVariableSelection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#renderJobStatus"
            },
            {
              "kind": "method",
              "name": "#renderSelectedParams"
            },
            {
              "kind": "method",
              "name": "#cancelJob"
            },
            {
              "kind": "method",
              "name": "#getData"
            },
            {
              "kind": "method",
              "name": "#touchAllFields"
            },
            {
              "kind": "method",
              "name": "#numberOfFilesFoundEstimate"
            },
            {
              "kind": "method",
              "name": "#getDocumentationLinks"
            },
            {
              "kind": "method",
              "name": "#getDataLinks"
            },
            {
              "kind": "method",
              "name": "#hasAtLeastOneSubsetOption"
            },
            {
              "kind": "method",
              "name": "#hasSpatialSubset"
            },
            {
              "kind": "method",
              "name": "#renderJobMessage"
            },
            {
              "kind": "method",
              "name": "#getJobMessageText"
            },
            {
              "kind": "method",
              "name": "#estimateJobSize"
            },
            {
              "kind": "method",
              "name": "#refineParameters"
            },
            {
              "kind": "method",
              "name": "#toggleDownloadMenu",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#downloadLinksAsTxt",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#downloadPythonScript",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#downloadEarthdataDownload",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleClickOutside",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleJupyterNotebookClick"
            },
            {
              "kind": "method",
              "name": "renderHistoryPanel"
            }
          ],
          "events": [
            {
              "description": "called when a subset job enters a final state (e.g. successful, failed, completed_with_errors)",
              "name": "terra-subset-job-complete",
              "reactName": "onTerraSubsetJobComplete",
              "eventName": "TerraSubsetJobCompleteEvent"
            }
          ],
          "attributes": [
            {
              "name": "collection-entry-id",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "collectionEntryId"
            },
            {
              "name": "show-collection-search",
              "type": {
                "text": "boolean | undefined"
              },
              "default": "true",
              "fieldName": "showCollectionSearch"
            },
            {
              "name": "job-id",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "jobId"
            },
            {
              "name": "bearer-token",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "bearerToken"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-subsetter",
          "tagName": "terra-data-subsetter",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://disc.gsfc.nasa.gov/components/data-subsetter\n * @status experimental\n * @since 1.0\n *\n * @dependency terra-example\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n *\n * @event terra-subset-job-complete - called when a subset job enters a final state (e.g. successful, failed, completed_with_errors)\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/data-subsetter",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "terra-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDataSubsetter",
            "module": "components/data-subsetter/data-subsetter.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/data-subsetter-history/data-subsetter-history.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDataSubsetterHistory",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "Record<string, typeof TerraElement>"
              },
              "static": true,
              "default": "{\n        'terra-icon': TerraIcon,\n        'terra-data-subsetter': TerraDataSubsetter,\n        'terra-dialog': TerraDialog,\n    }"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'History'",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "bearerToken",
              "type": {
                "text": "string"
              },
              "attribute": "bearer-token"
            },
            {
              "kind": "field",
              "name": "alwaysShow",
              "type": {
                "text": "boolean"
              },
              "description": "if a user has never done a subset request, by default they don't see the history panel at all\nthis prop allows you to override that behavior and always show the history panel",
              "attribute": "always-show"
            },
            {
              "kind": "field",
              "name": "collapsed",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "selectedJob",
              "type": {
                "text": "string | undefined"
              }
            },
            {
              "kind": "field",
              "name": "hideCancelled",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "dialog",
              "type": {
                "text": "TerraDialog"
              }
            },
            {
              "kind": "field",
              "name": "#controller",
              "privacy": "private",
              "default": "new DataSubsetterHistoryController(this)"
            },
            {
              "kind": "method",
              "name": "toggleCollapsed",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#renderHistoryItems",
              "parameters": [
                {
                  "name": "subsetJobs",
                  "type": {
                    "text": "SubsetJobs"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleHistoryItemClick",
              "parameters": [
                {
                  "name": "job",
                  "type": {
                    "text": "SubsetJobStatus"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'History'",
              "fieldName": "label"
            },
            {
              "name": "bearer-token",
              "type": {
                "text": "string"
              },
              "fieldName": "bearerToken"
            },
            {
              "name": "always-show",
              "type": {
                "text": "boolean"
              },
              "description": "if a user has never done a subset request, by default they don't see the history panel at all\nthis prop allows you to override that behavior and always show the history panel",
              "fieldName": "alwaysShow"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "data-subsetter-history",
          "tagName": "terra-data-subsetter-history",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://disc.gsfc.nasa.gov/components/data-subsetter-history\n * @status experimental\n * @since 1.0\n *\n * @dependency terra-example\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/data-subsetter-history",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "terra-example"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDataSubsetterHistory",
            "module": "components/data-subsetter-history/data-subsetter-history.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/date-picker/date-picker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDatePicker",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            },
            {
              "description": "The date input element.",
              "name": "input"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-button': TerraButton,\n    }"
            },
            {
              "kind": "field",
              "name": "selectedDates",
              "type": {
                "text": "{\n        startDate: string | null\n        endDate: string | null\n    }"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "attribute": "id"
            },
            {
              "kind": "field",
              "name": "range",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "range"
            },
            {
              "kind": "field",
              "name": "minDate",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "min-date"
            },
            {
              "kind": "field",
              "name": "maxDate",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "max-date"
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "start-date"
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "end-date"
            },
            {
              "kind": "field",
              "name": "defaultDate",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "default-date"
            },
            {
              "kind": "field",
              "name": "allowInput",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "allow-input"
            },
            {
              "kind": "field",
              "name": "altFormat",
              "type": {
                "text": "string"
              },
              "default": "'F j, Y'",
              "attribute": "alt-format"
            },
            {
              "kind": "field",
              "name": "altInput",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "alt-input"
            },
            {
              "kind": "field",
              "name": "altInputClass",
              "type": {
                "text": "string"
              },
              "default": "''",
              "attribute": "alt-input-class"
            },
            {
              "kind": "field",
              "name": "dateFormat",
              "type": {
                "text": "string"
              },
              "default": "'Y-m-d'",
              "attribute": "date-format"
            },
            {
              "kind": "field",
              "name": "enableTime",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "enable-time"
            },
            {
              "kind": "field",
              "name": "time24hr",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "time-24hr"
            },
            {
              "kind": "field",
              "name": "weekNumbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "week-numbers"
            },
            {
              "kind": "field",
              "name": "static",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "static"
            },
            {
              "kind": "field",
              "name": "position",
              "type": {
                "text": "'auto' | 'above' | 'below'"
              },
              "default": "'auto'",
              "attribute": "position"
            },
            {
              "kind": "field",
              "name": "showMonths",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "show-months"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Select Date'",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "flatpickrElement",
              "type": {
                "text": "any"
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "selectedDates",
                  "type": {
                    "text": "Date[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "handleBlur",
              "privacy": "private"
            }
          ],
          "attributes": [
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "fieldName": "id"
            },
            {
              "name": "range",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "range"
            },
            {
              "name": "min-date",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "minDate"
            },
            {
              "name": "max-date",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "maxDate"
            },
            {
              "name": "start-date",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "startDate"
            },
            {
              "name": "end-date",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "endDate"
            },
            {
              "name": "default-date",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "defaultDate"
            },
            {
              "name": "allow-input",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "allowInput"
            },
            {
              "name": "alt-format",
              "type": {
                "text": "string"
              },
              "default": "'F j, Y'",
              "fieldName": "altFormat"
            },
            {
              "name": "alt-input",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "altInput"
            },
            {
              "name": "alt-input-class",
              "type": {
                "text": "string"
              },
              "default": "''",
              "fieldName": "altInputClass"
            },
            {
              "name": "date-format",
              "type": {
                "text": "string"
              },
              "default": "'Y-m-d'",
              "fieldName": "dateFormat"
            },
            {
              "name": "enable-time",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "enableTime"
            },
            {
              "name": "time-24hr",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "time24hr"
            },
            {
              "name": "week-numbers",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "weekNumbers"
            },
            {
              "name": "static",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "static"
            },
            {
              "name": "position",
              "type": {
                "text": "'auto' | 'above' | 'below'"
              },
              "default": "'auto'",
              "fieldName": "position"
            },
            {
              "name": "show-months",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "showMonths"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "hideLabel"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Select Date'",
              "fieldName": "label"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A date picker component that supports single date selection or date range selection.",
          "tagNameWithoutPrefix": "date-picker",
          "tagName": "terra-date-picker",
          "customElement": true,
          "jsDoc": "/**\n * @summary A date picker component that supports single date selection or date range selection.\n * @documentation https://disc.gsfc.nasa.gov/components/date-picker\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n *\n * @csspart base - The component's base wrapper.\n * @csspart input - The date input element.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/date-picker",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDatePicker",
            "module": "components/date-picker/date-picker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/date-range-slider/date-range-slider.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDateRangeSlider",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "slots": [
            {
              "description": "The default slot.",
              "name": ""
            },
            {
              "description": "An example slot.",
              "name": "example"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "slider",
              "type": {
                "text": "HTMLElement & { noUiSlider: API }"
              }
            },
            {
              "kind": "field",
              "name": "timeScale",
              "type": {
                "text": "TimeScale"
              },
              "default": "'daily'",
              "attribute": "time-scale"
            },
            {
              "kind": "field",
              "name": "minDate",
              "type": {
                "text": "string"
              },
              "attribute": "min-date"
            },
            {
              "kind": "field",
              "name": "maxDate",
              "type": {
                "text": "string"
              },
              "attribute": "max-date"
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "string"
              },
              "description": "The start date for the time series plot.",
              "attribute": "start-date"
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "string"
              },
              "attribute": "end-date"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "disabled",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hasPips",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "has-pips",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "updateSlider"
            },
            {
              "kind": "method",
              "name": "disabledChanged"
            },
            {
              "kind": "method",
              "name": "renderSlider"
            },
            {
              "kind": "method",
              "name": "renderEmptySlider"
            },
            {
              "kind": "method",
              "name": "_getStep",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_getSliderFormatter",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Formatter"
                }
              }
            },
            {
              "kind": "method",
              "name": "_formatDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "string | number | Date"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "time-scale",
              "type": {
                "text": "TimeScale"
              },
              "default": "'daily'",
              "fieldName": "timeScale"
            },
            {
              "name": "min-date",
              "type": {
                "text": "string"
              },
              "fieldName": "minDate"
            },
            {
              "name": "max-date",
              "type": {
                "text": "string"
              },
              "fieldName": "maxDate"
            },
            {
              "name": "start-date",
              "type": {
                "text": "string"
              },
              "description": "The start date for the time series plot.",
              "fieldName": "startDate"
            },
            {
              "name": "end-date",
              "type": {
                "text": "string"
              },
              "fieldName": "endDate"
            },
            {
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "disabled"
            },
            {
              "name": "has-pips",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "hasPips"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Short summary of the component's intended use.",
          "tagNameWithoutPrefix": "date-range-slider",
          "tagName": "terra-date-range-slider",
          "customElement": true,
          "jsDoc": "/**\n * @summary Short summary of the component's intended use.\n * @documentation https://disc.gsfc.nasa.gov/components/date-range-slider\n * @status experimental\n * @since 1.0\n *\n * @slot - The default slot.\n * @slot example - An example slot.\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/date-range-slider",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDateRangeSlider",
            "module": "components/date-range-slider/date-range-slider.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/dialog/dialog.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraDialog",
          "slots": [
            {
              "description": "The dialog's main content",
              "name": ""
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dialogEl",
              "type": {
                "text": "HTMLDialogElement"
              }
            },
            {
              "kind": "field",
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "the ID to be used for accessibility associations",
              "attribute": "id"
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'fit-content'",
              "description": "the width of the dialog",
              "attribute": "width",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "clickOutsideToClose",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "allow closing the dialog when clicking outside of it",
              "attribute": "click-outside-to-close",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "showBackdrop",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Show a backdrop behind the dialog",
              "attribute": "show-backdrop",
              "reflects": true
            },
            {
              "kind": "method",
              "name": "toggle"
            },
            {
              "kind": "method",
              "name": "show"
            },
            {
              "kind": "method",
              "name": "hide",
              "parameters": [
                {
                  "name": "reason",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleBackdropClick",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when the dialog opens.",
              "name": "terra-dialog-show",
              "reactName": "onTerraDialogShow",
              "eventName": "TerraDialogShowEvent"
            },
            {
              "description": "Emitted when the dialog closes.",
              "name": "terra-dialog-hide",
              "reactName": "onTerraDialogHide",
              "eventName": "TerraDialogHideEvent"
            }
          ],
          "attributes": [
            {
              "name": "id",
              "type": {
                "text": "string"
              },
              "description": "the ID to be used for accessibility associations",
              "fieldName": "id"
            },
            {
              "name": "width",
              "type": {
                "text": "string"
              },
              "default": "'fit-content'",
              "description": "the width of the dialog",
              "fieldName": "width"
            },
            {
              "name": "click-outside-to-close",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "allow closing the dialog when clicking outside of it",
              "fieldName": "clickOutsideToClose"
            },
            {
              "name": "show-backdrop",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Show a backdrop behind the dialog",
              "fieldName": "showBackdrop"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Used to create both modal and non-modal dialog boxes.",
          "tagNameWithoutPrefix": "dialog",
          "tagName": "terra-dialog",
          "customElement": true,
          "jsDoc": "/**\n * @summary Used to create both modal and non-modal dialog boxes.\n * @documentation https://disc.gsfc.nasa.gov/components/dialog\n * @status stable\n * @since 1.0\n *\n * @slot - The dialog's main content\n *\n * @event terra-dialog-show - Emitted when the dialog opens.\n * @event terra-dialog-hide - Emitted when the dialog closes.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/dialog",
          "status": "stable",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraDialog",
            "module": "components/dialog/dialog.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/icon/icon.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraIcon",
          "cssParts": [
            {
              "description": "The internal SVG element.",
              "name": "svg"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#initialRender",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | HTMLTemplateResult | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw. Available names depend on the icon library being used.",
              "attribute": "name",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\ncan result in XSS attacks.",
              "attribute": "src"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\nignored by assistive devices.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "library",
              "type": {
                "text": "'default' | 'heroicons' | string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "attribute": "library",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The CSS color to assign to the SVG.",
              "attribute": "color"
            },
            {
              "kind": "field",
              "name": "fontSize",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The CSS font-size to assign to the SVG.",
              "attribute": "font-size"
            },
            {
              "kind": "method",
              "name": "#resolveIcon",
              "return": {
                "type": {
                  "text": "Promise<SVGResult>"
                }
              },
              "parameters": [
                {
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Given a URL, this function returns the resulting SVG element or an appropriate error symbol."
            },
            {
              "kind": "method",
              "name": "#getIconSource",
              "return": {
                "type": {
                  "text": "IconSource"
                }
              }
            },
            {
              "kind": "method",
              "name": "#styleFromAttributes",
              "description": "SVG takes a few presentation attributes. Since we're using a template for SVG and our host element isn't an SVG, we can pass those presentational attributes into a style attribute to affect the underlying SVG.\nMerge select attributes with existing inline style attribute to forward values to underlying SVG."
            },
            {
              "kind": "method",
              "name": "handleLabelChange"
            },
            {
              "kind": "method",
              "name": "setIcon"
            }
          ],
          "events": [
            {
              "description": "Emitted when the icon has loaded.",
              "name": "terra-load",
              "reactName": "onTerraLoad",
              "eventName": "TerraLoadEvent"
            },
            {
              "description": "Emitted when the icon fails to load due to an error.",
              "name": "terra-error",
              "reactName": "onTerraError",
              "eventName": "TerraErrorEvent"
            }
          ],
          "attributes": [
            {
              "name": "name",
              "type": {
                "text": "string | undefined"
              },
              "description": "The name of the icon to draw. Available names depend on the icon library being used.",
              "fieldName": "name"
            },
            {
              "name": "src",
              "type": {
                "text": "string | undefined"
              },
              "description": "An external URL of an SVG file. Be sure you trust the content you are including, as it will be executed as code and\ncan result in XSS attacks.",
              "fieldName": "src"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "An alternate description to use for assistive devices. If omitted, the icon will be considered presentational and\nignored by assistive devices.",
              "fieldName": "label"
            },
            {
              "name": "library",
              "type": {
                "text": "'default' | 'heroicons' | string"
              },
              "default": "'default'",
              "description": "The name of a registered custom icon library.",
              "fieldName": "library"
            },
            {
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The CSS color to assign to the SVG.",
              "fieldName": "color"
            },
            {
              "name": "font-size",
              "type": {
                "text": "string | null"
              },
              "default": "null",
              "description": "The CSS font-size to assign to the SVG.",
              "fieldName": "fontSize"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Icons are symbols that can be used to represent various options within an application.",
          "tagNameWithoutPrefix": "icon",
          "tagName": "terra-icon",
          "customElement": true,
          "jsDoc": "/**\n * @summary Icons are symbols that can be used to represent various options within an application.\n * @documentation https://disc.gsfc.nasa.gov/components/icon\n * @status experimental\n * @since 1.0\n *\n * @event terra-load - Emitted when the icon has loaded.\n * @event terra-error - Emitted when the icon fails to load due to an error.\n *\n * @csspart svg - The internal SVG element.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/icon",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraIcon",
            "module": "components/icon/icon.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/loader/loader.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraLoader",
          "cssProperties": [
            {
              "description": "An example CSS custom property.",
              "name": "--example"
            }
          ],
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "variant",
              "type": {
                "text": "'small' | 'large' | 'orbit'"
              },
              "default": "'large'",
              "description": "The loader's variant",
              "attribute": "variant",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "percent",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "The percent complete for the loader to display",
              "attribute": "percent"
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "an indeterminate loader has an unknown progress and will show a spinner",
              "attribute": "indeterminate"
            },
            {
              "kind": "field",
              "name": "_currentPercent",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "formatPercent",
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "variant",
              "type": {
                "text": "'small' | 'large' | 'orbit'"
              },
              "default": "'large'",
              "description": "The loader's variant",
              "fieldName": "variant"
            },
            {
              "name": "percent",
              "type": {
                "text": "string"
              },
              "default": "'0'",
              "description": "The percent complete for the loader to display",
              "fieldName": "percent"
            },
            {
              "name": "indeterminate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "an indeterminate loader has an unknown progress and will show a spinner",
              "fieldName": "indeterminate"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Loaders are used to indicate there is content that is loading.",
          "tagNameWithoutPrefix": "loader",
          "tagName": "terra-loader",
          "customElement": true,
          "jsDoc": "/**\n * @summary Loaders are used to indicate there is content that is loading.\n * @documentation https://disc.gsfc.nasa.gov/components/loader\n * @status experimental\n * @since 1.0\n *\n *\n *\n * @csspart base - The component's base wrapper.\n *\n * @cssproperty --example - An example CSS custom property.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/loader",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraLoader",
            "module": "components/loader/loader.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/login/login.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraLogin",
          "members": [
            {
              "kind": "field",
              "name": "#clientID",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#formRef",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#serverURL",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#loginTask",
              "privacy": "private",
              "default": "new Task(this, {\n        task: async ([], { signal }) => {\n            const code = await this.#getAccessCode(signal)\n            const accessToken = await this.#exchangeCodeForAccessToken(code, signal)\n\n            this.emit('terra-login', { detail: accessToken })\n            this.#clearForm()\n        },\n    })"
            },
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-button': TerraButton,\n        'terra-icon': TerraIcon,\n        'terra-loader': TerraLoader,\n    }"
            },
            {
              "kind": "method",
              "name": "#getAccessCode",
              "return": {
                "type": {
                  "text": "Promise<string>"
                }
              },
              "parameters": [
                {
                  "name": "signal",
                  "type": {
                    "text": "AbortSignal"
                  }
                }
              ],
              "description": "Using a fetch that contains our credentials, get a code from EDL that we can use to exchange for an JWT."
            },
            {
              "kind": "method",
              "name": "#exchangeCodeForAccessToken",
              "parameters": [
                {
                  "name": "code",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "signal",
                  "type": {
                    "text": "AbortSignal"
                  }
                }
              ],
              "description": "Check for a code and attempt to exchange it for a JWT, accessing only the access_token."
            },
            {
              "kind": "method",
              "name": "#handleSubmit",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "SubmitEvent"
                  }
                }
              ],
              "description": "If the user submits our form to log in to EDL, use a fetch request to get an authorization code, then exchange it for an access token."
            },
            {
              "kind": "method",
              "name": "#handleKeypress",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "KeyboardEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#clearForm",
              "description": "Clear the given form of all entries."
            }
          ],
          "events": [
            {
              "description": "Emitted when a bearer token has been received from EDL.",
              "name": "terra-login",
              "reactName": "onTerraLogin",
              "eventName": "TerraLoginEvent"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A form that logs in to Earthdata Login (EDL) and returns a bearer token.",
          "tagNameWithoutPrefix": "login",
          "tagName": "terra-login",
          "customElement": true,
          "jsDoc": "/**\n * @summary A form that logs in to Earthdata Login (EDL) and returns a bearer token.\n * @documentation https://disc.gsfc.nasa.gov/components/login\n * @status stable\n * @since 1.0\n *\n * @event terra-login - Emitted when a bearer token has been received from EDL.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/login",
          "status": "stable",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraLogin",
            "module": "components/login/login.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/map/map.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraMap",
          "members": [
            {
              "kind": "field",
              "name": "minZoom",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum zoom level of the map.",
              "attribute": "min-zoom"
            },
            {
              "kind": "field",
              "name": "maxZoom",
              "type": {
                "text": "number"
              },
              "default": "23",
              "description": "Maximum zoom level of the map.",
              "attribute": "max-zoom"
            },
            {
              "kind": "field",
              "name": "zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Initial map zoom level",
              "attribute": "zoom"
            },
            {
              "kind": "field",
              "name": "hasNavigation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has map navigation toolbar",
              "attribute": "has-navigation"
            },
            {
              "kind": "field",
              "name": "hasCoordTracker",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has coordinate tracker",
              "attribute": "has-coord-tracker"
            },
            {
              "kind": "field",
              "name": "hasShapeSelector",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has shape selector",
              "attribute": "has-shape-selector"
            },
            {
              "kind": "field",
              "name": "hideBoundingBoxSelection",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hide-bounding-box-selection"
            },
            {
              "kind": "field",
              "name": "hidePointSelection",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hide-point-selection"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "[]",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "mapElement",
              "type": {
                "text": "HTMLDivElement"
              }
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "parameters": [
                {
                  "name": "_oldValue",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "map",
              "default": "new Leaflet()"
            },
            {
              "kind": "field",
              "name": "shapes",
              "type": {
                "text": "ShapeFilesResponse"
              },
              "description": "List of geojson shapes"
            },
            {
              "kind": "field",
              "name": "_mapController",
              "type": {
                "text": "MapController"
              },
              "default": "new MapController(this)"
            },
            {
              "kind": "method",
              "name": "#markDynamicLeafletContent"
            },
            {
              "kind": "method",
              "name": "selectTemplate"
            },
            {
              "kind": "method",
              "name": "invalidateSize"
            }
          ],
          "attributes": [
            {
              "name": "min-zoom",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum zoom level of the map.",
              "fieldName": "minZoom"
            },
            {
              "name": "max-zoom",
              "type": {
                "text": "number"
              },
              "default": "23",
              "description": "Maximum zoom level of the map.",
              "fieldName": "maxZoom"
            },
            {
              "name": "zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Initial map zoom level",
              "fieldName": "zoom"
            },
            {
              "name": "has-navigation",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has map navigation toolbar",
              "fieldName": "hasNavigation"
            },
            {
              "name": "has-coord-tracker",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has coordinate tracker",
              "fieldName": "hasCoordTracker"
            },
            {
              "name": "has-shape-selector",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has shape selector",
              "fieldName": "hasShapeSelector"
            },
            {
              "name": "hide-bounding-box-selection",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hideBoundingBoxSelection"
            },
            {
              "name": "hide-point-selection",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hidePointSelection"
            },
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "default": "[]",
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A map component for visualizing and selecting coordinates.",
          "tagNameWithoutPrefix": "map",
          "tagName": "terra-map",
          "customElement": true,
          "jsDoc": "/**\n * @summary A map component for visualizing and selecting coordinates.\n * @documentation https://disc.gsfc.nasa.gov/components/map\n * @status mvp\n * @since 1.0\n *\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/map",
          "status": "mvp",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraMap",
            "module": "components/map/map.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/plot/plot.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraPlot",
          "cssParts": [
            {
              "description": "The component's base wrapper.",
              "name": "base"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver"
              }
            },
            {
              "kind": "field",
              "name": "base",
              "type": {
                "text": "PlotlyHTMLElement"
              }
            },
            {
              "kind": "field",
              "name": "plotTitle",
              "type": {
                "text": "string | undefined"
              },
              "attribute": "plotTitle"
            },
            {
              "kind": "field",
              "name": "layout",
              "type": {
                "text": "Partial<Layout> | undefined"
              },
              "default": "{}",
              "attribute": "layout"
            },
            {
              "kind": "field",
              "name": "config",
              "type": {
                "text": "Partial<Config> | undefined"
              },
              "default": "{}",
              "attribute": "config"
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Array<Partial<Data>>"
              },
              "default": "[]",
              "attribute": "data"
            },
            {
              "kind": "method",
              "name": "handleDataChange"
            },
            {
              "kind": "method",
              "name": "updatePlotWithData"
            },
            {
              "kind": "method",
              "name": "#handlePlotlyRelayout",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "PlotRelayoutEvent"
                  }
                }
              ]
            }
          ],
          "attributes": [
            {
              "name": "plotTitle",
              "type": {
                "text": "string | undefined"
              },
              "fieldName": "plotTitle"
            },
            {
              "name": "layout",
              "type": {
                "text": "Partial<Layout> | undefined"
              },
              "default": "{}",
              "fieldName": "layout"
            },
            {
              "name": "config",
              "type": {
                "text": "Partial<Config> | undefined"
              },
              "default": "{}",
              "fieldName": "config"
            },
            {
              "name": "data",
              "type": {
                "text": "Array<Partial<Data>>"
              },
              "default": "[]",
              "fieldName": "data"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A web component for interactive graphs using Plotly.js.",
          "tagNameWithoutPrefix": "plot",
          "tagName": "terra-plot",
          "customElement": true,
          "jsDoc": "/**\n * @summary A web component for interactive graphs using Plotly.js.\n * @documentation https://disc.gsfc.nasa.gov/components/plot\n * @status experimental\n * @since 1.0\n *\n * @csspart base - The component's base wrapper.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/plot",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraPlot",
            "module": "components/plot/plot.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/skeleton/skeleton.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraSkeleton",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'sl-skeleton': SlSkeleton,\n    }"
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "1",
              "attribute": "rows"
            },
            {
              "kind": "field",
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'pulse'",
              "attribute": "effect"
            },
            {
              "kind": "field",
              "name": "variableWidths",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "attribute": "variableWidths",
              "reflects": true
            }
          ],
          "attributes": [
            {
              "name": "rows",
              "type": {
                "text": "number"
              },
              "default": "1",
              "fieldName": "rows"
            },
            {
              "name": "effect",
              "type": {
                "text": "'pulse' | 'sheen' | 'none'"
              },
              "default": "'pulse'",
              "fieldName": "effect"
            },
            {
              "name": "variableWidths",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "fieldName": "variableWidths"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Skeletons are loading indicators to represent where content will eventually be drawn.",
          "tagNameWithoutPrefix": "skeleton",
          "tagName": "terra-skeleton",
          "customElement": true,
          "jsDoc": "/**\n * @summary Skeletons are loading indicators to represent where content will eventually be drawn.\n * @documentation https://disc.gsfc.nasa.gov/components/skeleton\n * @status experimental\n * @since 1.0\n *\n * @dependency sl-skeleton\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/skeleton",
          "status": "experimental",
          "since": "1.0",
          "dependencies": [
            "sl-skeleton"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraSkeleton",
            "module": "components/skeleton/skeleton.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/spatial-picker/spatial-picker.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraSpatialPicker",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-map': TerraMap,\n    }"
            },
            {
              "kind": "field",
              "name": "minZoom",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum zoom level of the map.",
              "attribute": "min-zoom"
            },
            {
              "kind": "field",
              "name": "maxZoom",
              "type": {
                "text": "number"
              },
              "default": "23",
              "description": "Maximum zoom level of the map.",
              "attribute": "max-zoom"
            },
            {
              "kind": "field",
              "name": "zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Initial map zoom level",
              "attribute": "zoom"
            },
            {
              "kind": "field",
              "name": "hasNavigation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "has map navigation toolbar",
              "attribute": "has-navigation"
            },
            {
              "kind": "field",
              "name": "hasCoordTracker",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "has coordinate tracker",
              "attribute": "has-coord-tracker"
            },
            {
              "kind": "field",
              "name": "hasShapeSelector",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has shape selector",
              "attribute": "has-shape-selector"
            },
            {
              "kind": "field",
              "name": "hideBoundingBoxSelection",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hide-bounding-box-selection"
            },
            {
              "kind": "field",
              "name": "hidePointSelection",
              "type": {
                "text": "boolean | undefined"
              },
              "attribute": "hide-point-selection"
            },
            {
              "kind": "field",
              "name": "initialValue",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "initialValue of spatial picker",
              "attribute": "initial-value"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Select Region'",
              "description": "spatial picker label",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "spatialConstraints",
              "type": {
                "text": "string"
              },
              "default": "'-180, -90, 180, 90'",
              "description": "Spatial constraints for the map (default: '-180, -90, 180, 90')",
              "attribute": "spatial-constraints"
            },
            {
              "kind": "field",
              "name": "isExpanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "attribute": "is-expanded",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the map should be shown inline, or as part of the normal content flow\nthe default is false, the map is positioned absolute under the input",
              "attribute": "inline"
            },
            {
              "kind": "field",
              "name": "showMapOnFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the map should show automatically when the input is focused",
              "attribute": "show-map-on-focus"
            },
            {
              "kind": "field",
              "name": "mapValue",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "spatialInput",
              "type": {
                "text": "HTMLInputElement"
              }
            },
            {
              "kind": "field",
              "name": "map",
              "type": {
                "text": "TerraMap"
              }
            },
            {
              "kind": "method",
              "name": "_blur",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "_focus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "_click",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "open"
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "_handleMapChange",
              "privacy": "private",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "renderMap"
            },
            {
              "kind": "method",
              "name": "invalidateSize"
            }
          ],
          "attributes": [
            {
              "name": "min-zoom",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Minimum zoom level of the map.",
              "fieldName": "minZoom"
            },
            {
              "name": "max-zoom",
              "type": {
                "text": "number"
              },
              "default": "23",
              "description": "Maximum zoom level of the map.",
              "fieldName": "maxZoom"
            },
            {
              "name": "zoom",
              "type": {
                "text": "number"
              },
              "default": "1",
              "description": "Initial map zoom level",
              "fieldName": "zoom"
            },
            {
              "name": "has-navigation",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "has map navigation toolbar",
              "fieldName": "hasNavigation"
            },
            {
              "name": "has-coord-tracker",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "has coordinate tracker",
              "fieldName": "hasCoordTracker"
            },
            {
              "name": "has-shape-selector",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "has shape selector",
              "fieldName": "hasShapeSelector"
            },
            {
              "name": "hide-bounding-box-selection",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hideBoundingBoxSelection"
            },
            {
              "name": "hide-point-selection",
              "type": {
                "text": "boolean | undefined"
              },
              "fieldName": "hidePointSelection"
            },
            {
              "name": "initial-value",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "initialValue of spatial picker",
              "fieldName": "initialValue"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "fieldName": "hideLabel"
            },
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Select Region'",
              "description": "spatial picker label",
              "fieldName": "label"
            },
            {
              "name": "spatial-constraints",
              "type": {
                "text": "string"
              },
              "default": "'-180, -90, 180, 90'",
              "description": "Spatial constraints for the map (default: '-180, -90, 180, 90')",
              "fieldName": "spatialConstraints"
            },
            {
              "name": "is-expanded",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "fieldName": "isExpanded"
            },
            {
              "name": "inline",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the map should be shown inline, or as part of the normal content flow\nthe default is false, the map is positioned absolute under the input",
              "fieldName": "inline"
            },
            {
              "name": "show-map-on-focus",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Whether the map should show automatically when the input is focused",
              "fieldName": "showMapOnFocus"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A component that allows input of coordinates and rendering of map.",
          "tagNameWithoutPrefix": "spatial-picker",
          "tagName": "terra-spatial-picker",
          "customElement": true,
          "jsDoc": "/**\n * @summary A component that allows input of coordinates and rendering of map.\n * @documentation https://disc.gsfc.nasa.gov/components/spatial-picker\n * @status experimental\n * @since 1.0\n *\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/spatial-picker",
          "status": "experimental",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraSpatialPicker",
            "module": "components/spatial-picker/spatial-picker.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/time-series/time-series.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraTimeSeries",
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-plot': TerraPlot,\n        'terra-loader': TerraLoader,\n        'terra-icon': TerraIcon,\n        'terra-button': TerraButton,\n        'terra-alert': TerraAlert,\n    }"
            },
            {
              "kind": "field",
              "name": "#timeSeriesController",
              "privacy": "private",
              "type": {
                "text": "TimeSeriesController"
              }
            },
            {
              "kind": "field",
              "name": "variableEntryId",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable entry ID (ex: GPM_3IMERGHH_06_precipitationCal)",
              "attribute": "variable-entry-id",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "description": "a collection entry id (ex: GPM_3IMERGHH_06)\nonly required if you don't include a variableEntryId",
              "attribute": "collection",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "variable",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable short name to plot (ex: precipitationCal)\nonly required if you don't include a variableEntryId",
              "attribute": "variable",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The start date for the time series plot. (ex: 2021-01-01)",
              "attribute": "start-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "string | undefined"
              },
              "description": "The end date for the time series plot. (ex: 2021-01-01)",
              "attribute": "end-date",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "location",
              "type": {
                "text": "string | undefined"
              },
              "description": "The point location in \"lat,lon\" format.",
              "attribute": "location",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "bearerToken",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "attribute": "bearer-token"
            },
            {
              "kind": "field",
              "name": "plot",
              "type": {
                "text": "TerraPlot"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "HTMLMenuElement"
              }
            },
            {
              "kind": "field",
              "name": "catalogVariable",
              "type": {
                "text": "Variable"
              }
            },
            {
              "kind": "field",
              "name": "quotaExceededOpen",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "false",
              "description": "user quota reached maximum request"
            },
            {
              "kind": "field",
              "name": "showDataPointWarning",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "if true, we'll show a warning to the user about them requesting a large number of data points"
            },
            {
              "kind": "field",
              "name": "estimatedDataPoints",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "stores the estimated"
            },
            {
              "kind": "field",
              "name": "activeMenuItem",
              "type": {
                "text": "MenuNames"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "handleFocus",
              "parameters": [
                {
                  "name": "_oldValue",
                  "type": {
                    "text": "MenuNames"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "MenuNames"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#catalog",
              "privacy": "private",
              "default": "new GiovanniVariableCatalog()"
            },
            {
              "kind": "field",
              "name": "#fetchVariableTask",
              "privacy": "private",
              "default": "new Task(this, {\n        task: async (_args, { signal }) => {\n            const variableEntryId = this.#getVariableEntryId()\n\n            console.debug('fetch variable ', variableEntryId)\n\n            if (!variableEntryId) {\n                return\n            }\n\n            const variable = await this.#catalog.getVariable(variableEntryId, {\n                signal,\n            })\n\n            console.debug('found variable ', variable)\n\n            if (!variable) {\n                return\n            }\n\n            this.startDate =\n                this.startDate ?? variable.exampleInitialStartDate?.toISOString()\n            this.endDate =\n                this.endDate ?? variable.exampleInitialEndDate?.toISOString()\n\n            this.catalogVariable = variable\n        },\n        args: () => [this.variableEntryId, this.collection, this.variable],\n    })"
            },
            {
              "kind": "field",
              "name": "#handleQuotaError",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#confirmDataPointWarning"
            },
            {
              "kind": "method",
              "name": "#cancelDataPointWarning"
            },
            {
              "kind": "method",
              "name": "#abortDataLoad",
              "description": "aborts the underlying data loading task, which cancels the network request"
            },
            {
              "kind": "method",
              "name": "#downloadCSV",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#convertToCSV",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "any[]"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#downloadPNG",
              "parameters": [
                {
                  "name": "_event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleActiveMenuItem",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleComponentLeave",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#handleMenuLeave",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "MouseEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getVariableEntryId"
            },
            {
              "kind": "method",
              "name": "#getYAxisLabel"
            },
            {
              "kind": "method",
              "name": "#renderInfoPanel"
            },
            {
              "kind": "method",
              "name": "#renderDownloadPanel"
            },
            {
              "kind": "method",
              "name": "#renderHelpPanel"
            },
            {
              "kind": "method",
              "name": "#renderJupyterNotebookPanel"
            },
            {
              "kind": "method",
              "name": "#handleJupyterNotebookClick"
            },
            {
              "kind": "method",
              "name": "#handlePlotRelayout",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "TerraPlotRelayoutEvent"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "name": "terra-date-range-change",
              "type": {
                "text": "CustomEvent"
              },
              "description": "Emitted whenever the date range is modified",
              "reactName": "onTerraDateRangeChange",
              "eventName": "TerraDateRangeChangeEvent"
            },
            {
              "description": "Emitted whenever time series data has been fetched from Giovanni",
              "name": "terra-time-series-data-change",
              "reactName": "onTerraTimeSeriesDataChange",
              "eventName": "TerraTimeSeriesDataChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "variable-entry-id",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable entry ID (ex: GPM_3IMERGHH_06_precipitationCal)",
              "fieldName": "variableEntryId"
            },
            {
              "name": "collection",
              "type": {
                "text": "string | undefined"
              },
              "description": "a collection entry id (ex: GPM_3IMERGHH_06)\nonly required if you don't include a variableEntryId",
              "fieldName": "collection"
            },
            {
              "name": "variable",
              "type": {
                "text": "string | undefined"
              },
              "description": "a variable short name to plot (ex: precipitationCal)\nonly required if you don't include a variableEntryId",
              "fieldName": "variable"
            },
            {
              "name": "start-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The start date for the time series plot. (ex: 2021-01-01)",
              "fieldName": "startDate"
            },
            {
              "name": "end-date",
              "type": {
                "text": "string | undefined"
              },
              "description": "The end date for the time series plot. (ex: 2021-01-01)",
              "fieldName": "endDate"
            },
            {
              "name": "location",
              "type": {
                "text": "string | undefined"
              },
              "description": "The point location in \"lat,lon\" format.",
              "fieldName": "location"
            },
            {
              "name": "bearer-token",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "fieldName": "bearerToken"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "A component for visualizing time series data using the GES DISC Giovanni API.",
          "tagNameWithoutPrefix": "time-series",
          "tagName": "terra-time-series",
          "customElement": true,
          "jsDoc": "/**\n * @summary A component for visualizing time series data using the GES DISC Giovanni API.\n * @documentation https://disc.gsfc.nasa.gov/components/time-series\n * @status mvp\n * @since 1.0\n *\n * @dependency terra-plot\n *\n * @event terra-date-range-change - Emitted whenever the date range is modified\n * @event terra-time-series-data-change - Emitted whenever time series data has been fetched from Giovanni\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/time-series",
          "status": "mvp",
          "since": "1.0",
          "dependencies": [
            "terra-plot"
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraTimeSeries",
            "module": "components/time-series/time-series.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/variable-combobox/variable-combobox.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraVariableCombobox",
          "cssProperties": [
            {
              "description": "The height of the host element.",
              "name": "--host-height"
            },
            {
              "description": "The height of the search help element.",
              "name": "--help-height"
            },
            {
              "description": "The height of the input's label element.",
              "name": "--label-height"
            }
          ],
          "cssParts": [
            {
              "description": "A `search` element, the component's base.",
              "name": "base"
            },
            {
              "description": "An `input` element used for searching.",
              "name": "combobox"
            },
            {
              "description": "A `button` used for toggling the listbox's visibility.",
              "name": "button"
            },
            {
              "description": "A `ul` that holds the clickable options.",
              "name": "listbox"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-button': TerraButton,\n        'terra-icon': TerraIcon,\n    }"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        ...LitElement.shadowRootOptions,\n        delegatesFocus: true,\n    }"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'terra-variable-combobox'"
            },
            {
              "kind": "field",
              "name": "initialQuery",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#combobox",
              "privacy": "private",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#fetchController",
              "privacy": "private",
              "type": {
                "text": "FetchController"
              }
            },
            {
              "kind": "field",
              "name": "#searchableList",
              "privacy": "private",
              "type": {
                "text": "ListItem[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#listbox",
              "privacy": "private",
              "type": {
                "text": "HTMLUListElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#searchEngine",
              "privacy": "private",
              "type": {
                "text": "Fuse<ListItem> | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#walker",
              "privacy": "private",
              "type": {
                "text": "TreeWalker | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#tagContainer",
              "privacy": "private",
              "type": {
                "text": "HTMLDivElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Search for Variables'",
              "description": "Label the combobox with this.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "hideHelp",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's help text.\nWhen hidden, not rendered at all.",
              "attribute": "hide-help",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "attribute": "hide-label",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "useTags",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the variable combobox uses tags or plain text to display the query.",
              "attribute": "use-tags",
              "reflects": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Represents the EntryID (<collection-name>_<variable-name>) of the selected variable.\nOther components (like the time-series graphing component) will use this.",
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "bearerToken",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "attribute": "bearer-token"
            },
            {
              "kind": "field",
              "name": "isExpanded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "query"
            },
            {
              "kind": "field",
              "name": "searchResults",
              "type": {
                "text": "ListItem[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "tags",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "tagContainerWidth",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "parameters": [
                {
                  "name": "oldValue",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "This component's value is read by other components.\nInternally, the variable metdata has slight differences that require adapting."
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "toggle"
            },
            {
              "kind": "field",
              "name": "#dispatchChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleButtonClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleComboboxChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleOptionClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#manageListboxVisibility",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#selectOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#renderTags",
              "parameters": [
                {
                  "name": "tag",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "_index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            }
          ],
          "events": [
            {
              "description": "Emitted when an option is selected.",
              "name": "terra-combobox-change",
              "reactName": "onTerraComboboxChange",
              "eventName": "TerraComboboxChangeEvent"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Search for Variables'",
              "description": "Label the combobox with this.",
              "fieldName": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "fieldName": "placeholder"
            },
            {
              "name": "hide-help",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's help text.\nWhen hidden, not rendered at all.",
              "fieldName": "hideHelp"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "fieldName": "hideLabel"
            },
            {
              "name": "use-tags",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Determines if the variable combobox uses tags or plain text to display the query.",
              "fieldName": "useTags"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Represents the EntryID (<collection-name>_<variable-name>) of the selected variable.\nOther components (like the time-series graphing component) will use this.",
              "fieldName": "value"
            },
            {
              "name": "bearer-token",
              "type": {
                "text": "string"
              },
              "description": "The token to be used for authentication with remote servers.\nThe component provides the header \"Authorization: Bearer\" (the request header and authentication scheme).\nThe property's value will be inserted after \"Bearer\" (the authentication scheme).",
              "fieldName": "bearerToken"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Fuzzy-search for dataset variables in combobox with list autocomplete.",
          "tagNameWithoutPrefix": "variable-combobox",
          "tagName": "terra-variable-combobox",
          "customElement": true,
          "jsDoc": "/**\n * @summary Fuzzy-search for dataset variables in combobox with list autocomplete.\n * @documentation https://disc.gsfc.nasa.gov/components/variable-combobox\n * @see https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/\n * @status MVP\n * @since 1.0\n *\n * @csspart base - A `search` element, the component's base.\n * @csspart combobox - An `input` element used for searching.\n * @csspart button - A `button` used for toggling the listbox's visibility.\n * @csspart listbox - A `ul` that holds the clickable options.\n *\n * @cssproperty --host-height - The height of the host element.\n * @cssproperty --help-height - The height of the search help element.\n * @cssproperty --label-height - The height of the input's label element.\n *\n * @event terra-combobox-change - Emitted when an option is selected.\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/variable-combobox",
          "status": "MVP",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraVariableCombobox",
            "module": "components/variable-combobox/variable-combobox.js"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "components/variable-keyword-search/variable-keyword-search.js",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "TerraVariableKeywordSearch",
          "cssProperties": [
            {
              "description": "The height of the host element.",
              "name": "--host-height"
            },
            {
              "description": "The height of the input's label element.",
              "name": "--label-height"
            }
          ],
          "cssParts": [
            {
              "description": "A `search` element, the component's base.",
              "name": "base"
            },
            {
              "description": "An `input` element used for searching.",
              "name": "combobox"
            },
            {
              "description": "A `button` used for toggling the listbox's visibility.",
              "name": "button"
            },
            {
              "description": "A `ul` that holds the clickable options.",
              "name": "listbox"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "dependencies",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        'terra-button': TerraButton,\n        'terra-icon': TerraIcon,\n    }"
            },
            {
              "kind": "field",
              "name": "shadowRootOptions",
              "type": {
                "text": "object"
              },
              "static": true,
              "default": "{\n        ...LitElement.shadowRootOptions,\n        delegatesFocus: true,\n    }"
            },
            {
              "kind": "field",
              "name": "tagName",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "'terra-variable-keyword-search'"
            },
            {
              "kind": "field",
              "name": "initialQuery",
              "type": {
                "text": "string"
              },
              "static": true,
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#combobox",
              "privacy": "private",
              "type": {
                "text": "HTMLInputElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#fetchController",
              "privacy": "private",
              "default": "new FetchController(this)"
            },
            {
              "kind": "field",
              "name": "#listbox",
              "privacy": "private",
              "type": {
                "text": "HTMLUListElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#searchEngine",
              "privacy": "private",
              "type": {
                "text": "Fuse<ListItem> | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#walker",
              "privacy": "private",
              "type": {
                "text": "TreeWalker | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Enter search terms (e.g., precipitation, AOD)'",
              "description": "Label the combobox with this.",
              "attribute": "label"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "attribute": "placeholder"
            },
            {
              "kind": "field",
              "name": "hideLabel",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "attribute": "hide-label"
            },
            {
              "kind": "field",
              "name": "searchConfig",
              "type": {
                "text": "object"
              },
              "default": "{\n        //* @see {@link https://www.fusejs.io/api/options.html#options}\n        keys: ['id'],\n        useExtendedSearch: true,\n    }",
              "description": "type can be `Boolean`, `String`, `Number`, `Object`, or `Array`",
              "attribute": "searchConfig"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "attribute": "value"
            },
            {
              "kind": "field",
              "name": "isExpanded",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "query"
            },
            {
              "kind": "field",
              "name": "searchResults",
              "type": {
                "text": "ListItem[]"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "valueChanged",
              "parameters": [
                {
                  "name": "_oldValue",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "clear"
            },
            {
              "kind": "method",
              "name": "close"
            },
            {
              "kind": "method",
              "name": "toggle"
            },
            {
              "kind": "field",
              "name": "#handleComboboxChange",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleOptionClick",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#handleKeydown",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#manageListboxVisibility",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#selectOption",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleSearch",
              "parameters": [
                {
                  "name": "query",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#clearSearch"
            }
          ],
          "events": [
            {
              "description": "Emitted when an option is selected.",
              "name": "terra-variable-keyword-search-change",
              "reactName": "onTerraVariableKeywordSearchChange",
              "eventName": "TerraVariableKeywordSearchChangeEvent"
            },
            {
              "description": "Emitted when the component is triggering a search (like a form triggering submit).",
              "name": "terra-search",
              "reactName": "onTerraSearch",
              "eventName": "TerraSearchEvent"
            }
          ],
          "attributes": [
            {
              "name": "label",
              "type": {
                "text": "string"
              },
              "default": "'Enter search terms (e.g., precipitation, AOD)'",
              "description": "Label the combobox with this.",
              "fieldName": "label"
            },
            {
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set a placeholder for the combobox with this.\nDefaults to the label's value.",
              "fieldName": "placeholder"
            },
            {
              "name": "hide-label",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "Hide the combobox's label text.\nWhen hidden, still presents to screen readers.",
              "fieldName": "hideLabel"
            },
            {
              "name": "searchConfig",
              "type": {
                "text": "object"
              },
              "default": "{\n        //* @see {@link https://www.fusejs.io/api/options.html#options}\n        keys: ['id'],\n        useExtendedSearch: true,\n    }",
              "description": "type can be `Boolean`, `String`, `Number`, `Object`, or `Array`",
              "fieldName": "searchConfig"
            },
            {
              "name": "value",
              "type": {
                "text": "string"
              },
              "fieldName": "value"
            }
          ],
          "superclass": {
            "name": "TerraElement",
            "module": "/src/internal/terra-element.js"
          },
          "summary": "Fuzzy-search for dataset keywords in combobox with list autocomplete.",
          "tagNameWithoutPrefix": "variable-keyword-search",
          "tagName": "terra-variable-keyword-search",
          "customElement": true,
          "jsDoc": "/**\n * @summary Fuzzy-search for dataset keywords in combobox with list autocomplete.\n * @documentation https://disc.gsfc.nasa.gov/components/giovanni-serch\n * @see https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-autocomplete-list/\n * @status MVP\n * @since 1.0\n *\n * @csspart base - A `search` element, the component's base.\n * @csspart combobox - An `input` element used for searching.\n * @csspart button - A `button` used for toggling the listbox's visibility.\n * @csspart listbox - A `ul` that holds the clickable options.\n *\n * @cssproperty --host-height - The height of the host element.\n * @cssproperty --label-height - The height of the input's label element.\n *\n * @event terra-variable-keyword-search-change - Emitted when an option is selected.\n * @event terra-search - Emitted when the component is triggering a search (like a form triggering submit).\n */",
          "documentation": "https://disc.gsfc.nasa.gov/components/giovanni-serch",
          "status": "MVP",
          "since": "1.0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "TerraVariableKeywordSearch",
            "module": "components/variable-keyword-search/variable-keyword-search.js"
          }
        }
      ]
    }
  ],
  "package": {
    "name": "@nasa-terra/components",
    "description": "A collection of NASA Earthdata components",
    "version": "0.0.57",
    "author": "NASA GES DISC <https://disc.gsfc.nasa.gov>",
    "homepage": "https://github.com/gesdisc/components",
    "license": "MIT"
  }
}
